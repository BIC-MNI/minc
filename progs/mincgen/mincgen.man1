.\"                                      Hey, EMACS: -*- nroff -*-
.\" $Header: /private-cvsroot/minc/progs/mincgen/mincgen.man1,v 1.3 2008/10/12 05:07:12 stever Exp $
.TH MINCGEN 1 "$Date: 2008/10/12 05:07:12 $" "" "MINC User's Guide"
.SH NAME
mincgen \- Generate a MINC file from a CDL file.
.SH SYNOPSIS
.HP
mincgen
.nh
\%[-b]
\%[-n]
\%[-o \fIminc_filename\fP]
\%\fIinput_file\fP
.hy
.ft
.SH DESCRIPTION
\fBmincgen\fP generates a MINC file.  The input to \fBmincgen\fP is a 
description of a MINC
file in a small language known as CDL (network Common Data form Language),
described below.
If no options are specified in invoking \fBmincgen\fP, it merely checks the
syntax of the input CDL file, producing error messages for
any violations of CDL syntax.  Other options can be used to create the
corresponding MINC file.
.LP
\fBmincgen\fP may be used with the companion program \fBmincdump\fP to perform
some simple operations on MINC files.  For example, to rename a dimension
in a MINC file, use \fBmincdump\fP to get a CDL version of the MINC file,
edit the CDL file to change the name of the dimensions, and use \fBmincgen\fP
to generate the corresponding MINC file from the edited CDL file.
.SH OPTIONS
.IP "\fB-b\fP"
Create a (binary) MINC file.  If the \fB-o\fP option is absent, a default
file name will be constructed from the MINC name (specified after the
\fBnetcdf\fP or \fBhdf5\fP keyword in the input) by appending the `.mnc' 
extension.  If a
file already exists with the specified name, it will be overwritten.
.IP "\fB-o\fP \fRminc_filename\fP"
Name for the binary MINC file created.  If this option is specified, it
implies
the "\fB-b\fP" option.  (This option is necessary because MINC files
cannot be written directly to standard output, since standard output is not
seekable.)
.SH EXAMPLES
.LP
Check the syntax of the CDL file `\fBfoo.cdl\fP':
.RS
.HP
mincgen foo.cdl
.RE
.LP
From the CDL file `\fBfoo.cdl\fP', generate an equivalent binary MINC file
named `\fBx.mnc\fP':
.RS
.HP
mincgen -o x.mnc foo.cdl
.RE
.LP
.SH USAGE
.SS "CDL Syntax Summary"
.LP
Below is an example of CDL syntax, describing a MINC file with several
named dimensions (xspace, yspace, and zspace), variables (zspace, image), 
variable attributes (valid_range, signtype), and
some data.  CDL keywords are in boldface.  (This example is intended to
illustrate the syntax; a real CDL file would have a more complete set of
attributes so that the data would be more completely self-describing.)

.RS
.nf
\fBnetcdf\fP foo {  // an example MINC specification in CDL

\fBdimensions\fP:
	xspace = 8;
        yspace = 8;
        zspace = 5;

\fBvariables\fP:
	\fBfloat\fP  xspace;
        \fBfloat\fP  yspace;
	\fBfloat\fP  zspace(zspace);
	\fBshort\fP  image(zspace,yspace,xspace);
        \fBdouble\fP image-min(zspace)
        \fBdouble\fP image-max(zspace)

	// variable attributes
        image:valid_range = 0,5;
\fBdata\fP:
        image-min = -1,-1,-1,-1,-1;
        image-max = 1,1,1,1,1;
        image = 
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
        3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5;
        zspace = 0,2,3.5,7,10;
}
.fi
.RE
.LP
All CDL statements are terminated by a semicolon.  Spaces, tabs,
and newlines can be used freely for readability.
Comments may follow the characters `//' on any line.
.LP
A CDL description consists of three optional parts: \fIdimensions\fP,
\fIvariables\fP, and \fIdata\fP, beginning with the keyword
.BR dimensions: ,
.BR variables: ,
and
.BR data ,
respectively.
The variable part may contain \fIvariable
declarations\fP and \fIattribute assignments\fP.
.LP
A MINC \fIdimension\fP is used to define the shape of one or more of the
multidimensional variables contained in the MINC file.  A MINC
dimension has a name, a size, and possibly several other attributes.
.LP
A \fIvariable\fP represents a multidimensional array of values of the
same type.  A variable has a name, a data type, and a shape described
by its list of dimensions.  Each variable may also have associated
\fIattributes\fP (see below) as well as data values.  The name, data
type, and shape of a variable are specified by its declaration in the
\fIvariable\fP section of a CDL description.  A variable may have the same
name as a dimension; by convention such a variable is one-dimensional
and contains coordinates of the dimension it names.  Dimensions need
not have corresponding variables.
.LP
A netCDF \fIattribute\fP contains information about a netCDF variable or
about the whole netCDF dataset.  Attributes are used
to specify such properties as units, special values, maximum and
minimum valid values, scaling factors, offsets, and parameters.  Attribute
information is represented by single values or arrays of values.  For
example, "units" is an attribute represented by a character array such
as "celsius".  An attribute has an associated variable, a name,
a data type, a length, and a value.  In contrast to variables that are
intended for data, attributes are intended for metadata (data about
data).
.LP
In CDL, an attribute is designated by a variable and attribute name,
separated by `:'.  It is possible to assign \fIglobal\fP attributes
not associated with any variable to the file as a whole by using
`:' before the attribute name.  The data type of an attribute in CDL
is derived from the type of the value assigned to it.  The length of
an attribute is the number of data values assigned to it, or the
number of characters in the character string assigned to it.  Multiple
values are assigned to non-character attributes by separating the
values with commas.  All values assigned to an attribute must be of
the same type.
.LP
The names for CDL dimensions, variables, and attributes must begin with an
alphabetic character or `_', and subsequent characters may be alphanumeric
or `_' or `-'.
.LP
The optional \fIdata\fP section of a CDL specification is where
variables may be initialized.  The syntax of an initialization
is simple: a variable name, an equals sign, and a
comma-delimited list of constants (possibly separated by spaces, tabs
and newlines) terminated with a semicolon.  For multi-dimensional
arrays, the last dimension varies fastest.  Thus row-order rather than
column order is used for matrices.  If fewer values are supplied than
are needed to fill a variable, it is extended with a type-dependent
`fill value', which can be overridden by supplying a value for a
distinguished variable attribute named `_FillValue'.  The
types of constants need not match the type declared for a variable;
coercions are done to convert integers to floating point, for example.
The constant `_' can be used to designate the fill value for a variable.
.SS "Primitive Data Types"
.LP
.RS
.nf
\fBchar\fP	characters
\fBbyte\fP	8-bit data
\fBshort\fP	16-bit signed integers
\fBlong\fP	32-bit signed integers
\fBint\fP	(synonymous with \fBlong\fP)
\fBfloat\fP	IEEE single precision floating point (32 bits)
\fBreal\fP	(synonymous with \fBfloat\fP)
\fBdouble\fP	IEEE double precision floating point (64 bits)
.fi
.RE
.LP
Except for the added data-type \fBbyte\fP and the lack of
\fBunsigned\fP,
CDL supports the same primitive data types as C.
The names for the primitive data types are reserved words in CDL,
so the names of variables, dimensions, and attributes must not be
type names.  In declarations, type names may be specified
in either upper or lower case.
.LP
Bytes differ from characters in that they are intended to hold a full eight
bits of data, and the zero byte has no special significance, as it
does for character data.
.LP
Shorts can hold values between -32768 and 32767.
.LP
Longs can hold values between -2147483648 and 2147483647.
\fBint\fP and \fBinteger\fP are
accepted as synonyms for \fBlong\fP in CDL declarations.
Now that there are platforms with 64-bit representations for C longs, it may
be better to use the \fBint\fP synonym to avoid confusion.
.LP
Floats can hold values between about -3.4+38 and 3.4+38.  Their
external representation is as 32-bit IEEE normalized single-precision
floating point numbers. \fBreal\fP is accepted
as a synonym for \fBfloat\fP in CDL declarations.
.LP
Doubles can hold values between about -1.7+308 and 1.7+308.  Their
external representation is as 64-bit IEEE standard normalized
double-precision floating point numbers.
.LP
.SS "CDL Constants"
.LP
Constants assigned to attributes or variables may be of any of the
basic MINC types.  The syntax for constants is similar to C syntax,
except that type suffixes must be appended to shorts and floats to
distinguish them from longs and doubles.
.LP
A \fIbyte\fP constant is represented by a single character or multiple
character escape sequence enclosed in single quotes.  For example,
.RS
.nf
 'a'		// ASCII `a'
 '\\0'		// a zero byte
 '\\n'		// ASCII newline character
 '\\33'		// ASCII escape character (33 octal)
 '\\x2b'	// ASCII plus (2b hex)
 '\\377'	// 377 octal = 255 decimal, non-ASCII
.fi
.RE
.LP
Character constants are enclosed in double quotes.  A character array
may be represented as a string enclosed in double quotes.  The usual C
string escape conventions are honored.  For example
.RS
.nf
"a"		// ASCII `a'
"Two\\nlines\\n"	// a 10-character string with two embedded newlines
"a bell:\\007"	// a string containing an ASCII bell
.fi
.RE
Note that the character array "a" would fit in a one-element
variable, since no terminating NULL character is assumed.  However, a zero
byte in a character array is interpreted as the end of the significant
characters by the \fBmincdump\fP program, following the C convention.
Therefore, a NULL byte should not be embedded in a character string unless
at the end: use the \fIbyte\fP data type instead for byte arrays that
contain the zero byte.  MINC and CDL have no string type, but only
fixed-length character arrays, which may be multi-dimensional.
.LP
\fIshort\fP integer constants are intended for representing 16-bit
signed quantities.  The form of a \fIshort\fP constant is an integer
constant with an `s' or `S' appended.  If a \fIshort\fP constant
begins with `0', it is interpreted as octal, except that if it begins with
`0x', it is interpreted as a hexadecimal constant.  For example:
.RS
.nf
-2s	// a short -2
0123s	// octal
0x7ffs  //hexadecimal
.fi
.RE
.LP
\fILong\fP integer constants are intended for representing 32-bit signed
quantities.  The form of a \fIlong\fP constant is an ordinary integer
constant, although it is acceptable to append an optional `l' or
`L'.  If a \fIlong\fP constant begins with `0', it is interpreted as
octal, except that if it begins with `0x', it is interpreted as a hexadecimal
constant.  Examples of valid \fIlong\fP constants include:
.RS
.nf
-2
1234567890L
0123		// octal
0x7ff		// hexadecimal
.fi
.RE
.LP
Floating point constants of type \fIfloat\fP are appropriate for representing
floating point data with about seven significant digits of precision. 
The form of a \fIfloat\fP constant is the same as a C floating point
constant with an `f' or `F' appended.  For example the following
are all acceptable \fIfloat\fP constants:
.RS
.nf
-2.0f
3.14159265358979f	// will be truncated to less precision
1.f
.fi
.RE
.LP
Floating point constants of type \fIdouble\fP are appropriate for
representing floating point data with about sixteen significant digits
of precision.  The form of a \fIdouble\fP constant is the same as a C
floating point constant.  An optional `d' or `D' may be appended.
For example the following are all acceptable \fIdouble\fP constants:
.RS
.nf
-2.0
3.141592653589793
1.0e-20
1.d
.fi
.RE

.SH AUTHOR
Originally written by members of the Unidata Program at the University 
Corporation for Atmospheric Research.

Modified by Bert Vincent (bert@bic.mni.mcgill.ca) for use with both 
netCDF and HDF5 files.

.SH COPYRIGHTS
Copyright \(co University Corporation for Atmospheric Research

.SH "SEE ALSO"
.LP
.BR ncdump (1),
.BR ncgen (1),
.BR netcdf (3)
.SH BUGS
.LP
The CDL syntax makes it easy to assign what looks like an array of
variable-length strings to a variable, but the strings will simply be
concatenated into a single array of characters, since MINC cannot
represent an array of variable-length strings in one MINC variable.
.LP
MINC and CDL do not yet support a type corresponding to a 64-bit integer.
